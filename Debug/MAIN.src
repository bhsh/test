	; TASKING VX-toolset for TriCore: C compiler v3.5r1 Build 484.1.2
	; Options: -f cc14752a -c99 --dep-file=.MAIN.o.d -Ctc1782 --core=tc1.3.1 --fpu-present -F -g --make-target=MAIN.o -t4 --language=-gcc,-volatile,+strings --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto -o MAIN.src
	; Module start
	.name	"MAIN"

	
$FPU
$TC131
	
	.sdecl	'.text.MAIN.MAIN_vInit',code,cluster('MAIN_vInit')
	.sect	'.text.MAIN.MAIN_vInit'
	.align	2
	
	.global	MAIN_vInit

; ..\MAIN.c	     1  //****************************************************************************
; ..\MAIN.c	     2  // @Module        Project Settings
; ..\MAIN.c	     3  // @Filename      MAIN.c
; ..\MAIN.c	     4  // @Project       ASC.dav
; ..\MAIN.c	     5  //----------------------------------------------------------------------------
; ..\MAIN.c	     6  // @Controller    Infineon TC1728
; ..\MAIN.c	     7  //
; ..\MAIN.c	     8  // @Compiler      Tasking 3.5r1
; ..\MAIN.c	     9  //
; ..\MAIN.c	    10  // @Codegenerator 1.0
; ..\MAIN.c	    11  //
; ..\MAIN.c	    12  // @Description   This file contains the project initialization function.
; ..\MAIN.c	    13  //
; ..\MAIN.c	    14  //----------------------------------------------------------------------------
; ..\MAIN.c	    15  // @Date          2015/1/11 12:44:16
; ..\MAIN.c	    16  //
; ..\MAIN.c	    17  //****************************************************************************
; ..\MAIN.c	    18  
; ..\MAIN.c	    19  // USER CODE BEGIN (MAIN_General,1)
; ..\MAIN.c	    20  
; ..\MAIN.c	    21  // USER CODE END
; ..\MAIN.c	    22  
; ..\MAIN.c	    23  
; ..\MAIN.c	    24  
; ..\MAIN.c	    25  //****************************************************************************
; ..\MAIN.c	    26  // @Project Includes
; ..\MAIN.c	    27  //****************************************************************************
; ..\MAIN.c	    28  
; ..\MAIN.c	    29  #include "MAIN.h"
; ..\MAIN.c	    30  
; ..\MAIN.c	    31  // USER CODE BEGIN (MAIN_General,2)
; ..\MAIN.c	    32  
; ..\MAIN.c	    33  // USER CODE END
; ..\MAIN.c	    34  
; ..\MAIN.c	    35  
; ..\MAIN.c	    36  //****************************************************************************
; ..\MAIN.c	    37  // @Macros
; ..\MAIN.c	    38  //****************************************************************************
; ..\MAIN.c	    39  
; ..\MAIN.c	    40  // USER CODE BEGIN (MAIN_General,3)
; ..\MAIN.c	    41  
; ..\MAIN.c	    42  // USER CODE END
; ..\MAIN.c	    43  
; ..\MAIN.c	    44  
; ..\MAIN.c	    45  //****************************************************************************
; ..\MAIN.c	    46  // @Defines
; ..\MAIN.c	    47  //****************************************************************************
; ..\MAIN.c	    48  
; ..\MAIN.c	    49  #define RESET_INDICATOR     ((SCU_RSTSTAT & ((uword)(0x0001001B))))
; ..\MAIN.c	    50  #define WATCHDOG_RESET      ((uword)0x00000008)
; ..\MAIN.c	    51  #define SOFTWARE_RESET      ((uword)0x00000010)
; ..\MAIN.c	    52  #define ESR0_RESET          ((uword)0x00000001)
; ..\MAIN.c	    53  #define ESR1_RESET          ((uword)0x00000002)
; ..\MAIN.c	    54  #define POWERON_RESET       ((uword)0x00010000)
; ..\MAIN.c	    55  
; ..\MAIN.c	    56  // USER CODE BEGIN (MAIN_General,4)
; ..\MAIN.c	    57  
; ..\MAIN.c	    58  // USER CODE END
; ..\MAIN.c	    59  
; ..\MAIN.c	    60  
; ..\MAIN.c	    61  //****************************************************************************
; ..\MAIN.c	    62  // @Typedefs
; ..\MAIN.c	    63  //****************************************************************************
; ..\MAIN.c	    64  
; ..\MAIN.c	    65  // USER CODE BEGIN (MAIN_General,5)
; ..\MAIN.c	    66  
; ..\MAIN.c	    67  // USER CODE END
; ..\MAIN.c	    68  
; ..\MAIN.c	    69  
; ..\MAIN.c	    70  //****************************************************************************
; ..\MAIN.c	    71  // @Imported Global Variables
; ..\MAIN.c	    72  //****************************************************************************
; ..\MAIN.c	    73  
; ..\MAIN.c	    74  // USER CODE BEGIN (MAIN_General,6)
; ..\MAIN.c	    75  
; ..\MAIN.c	    76  // USER CODE END
; ..\MAIN.c	    77  
; ..\MAIN.c	    78  
; ..\MAIN.c	    79  //****************************************************************************
; ..\MAIN.c	    80  // @Global Variables
; ..\MAIN.c	    81  //****************************************************************************
; ..\MAIN.c	    82  volatile unsigned int DummyToForceRead; 
; ..\MAIN.c	    83  
; ..\MAIN.c	    84  // USER CODE BEGIN (MAIN_General,7)
; ..\MAIN.c	    85  
; ..\MAIN.c	    86  // USER CODE END
; ..\MAIN.c	    87  
; ..\MAIN.c	    88  
; ..\MAIN.c	    89  //****************************************************************************
; ..\MAIN.c	    90  // @External Prototypes
; ..\MAIN.c	    91  //****************************************************************************
; ..\MAIN.c	    92  
; ..\MAIN.c	    93  // USER CODE BEGIN (MAIN_General,8)
; ..\MAIN.c	    94  
; ..\MAIN.c	    95  // USER CODE END
; ..\MAIN.c	    96  
; ..\MAIN.c	    97  
; ..\MAIN.c	    98  //****************************************************************************
; ..\MAIN.c	    99  // @Prototypes Of Local Functions
; ..\MAIN.c	   100  //****************************************************************************
; ..\MAIN.c	   101  
; ..\MAIN.c	   102  // USER CODE BEGIN (MAIN_General,9)
; ..\MAIN.c	   103  
; ..\MAIN.c	   104  // USER CODE END
; ..\MAIN.c	   105  
; ..\MAIN.c	   106  
; ..\MAIN.c	   107  //****************************************************************************
; ..\MAIN.c	   108  // @Function      void MAIN_vInit(void) 
; ..\MAIN.c	   109  //
; ..\MAIN.c	   110  //----------------------------------------------------------------------------
; ..\MAIN.c	   111  // @Description   This function initializes the microcontroller.
; ..\MAIN.c	   112  //
; ..\MAIN.c	   113  //----------------------------------------------------------------------------
; ..\MAIN.c	   114  // @Returnvalue   None
; ..\MAIN.c	   115  //
; ..\MAIN.c	   116  //----------------------------------------------------------------------------
; ..\MAIN.c	   117  // @Parameters    None
; ..\MAIN.c	   118  //
; ..\MAIN.c	   119  //----------------------------------------------------------------------------
; ..\MAIN.c	   120  // @Date          2015/1/11
; ..\MAIN.c	   121  //
; ..\MAIN.c	   122  //****************************************************************************
; ..\MAIN.c	   123  
; ..\MAIN.c	   124  // USER CODE BEGIN (Init,1)
; ..\MAIN.c	   125  
; ..\MAIN.c	   126  // USER CODE END
; ..\MAIN.c	   127  
; ..\MAIN.c	   128  void MAIN_vInit(void)
; Function MAIN_vInit
.L19:
MAIN_vInit:	.type	func

; ..\MAIN.c	   129  {
; ..\MAIN.c	   130    // USER CODE BEGIN (Init,2)
; ..\MAIN.c	   131  
; ..\MAIN.c	   132    // USER CODE END
; ..\MAIN.c	   133  
; ..\MAIN.c	   134    //// -----------------------------------------------------------------------
; ..\MAIN.c	   135    //// Begin of Important Settings for the Start-Up File
; ..\MAIN.c	   136    //// -----------------------------------------------------------------------
; ..\MAIN.c	   137    ///  All following settings must be set in the start-up file. You can use 
; ..\MAIN.c	   138    ///  DAvE's project file (*.dpt) to include this register values into your 
; ..\MAIN.c	   139    ///  compiler EDE.
; ..\MAIN.c	   140  
; ..\MAIN.c	   141      ///  ---------------------------------------------------------------------
; ..\MAIN.c	   142      ///  System Peripheral Bus Control Unit (SBCU):
; ..\MAIN.c	   143      ///  ---------------------------------------------------------------------
; ..\MAIN.c	   144      ///  SBCU starvation protection is enabled
; ..\MAIN.c	   145      ///  the debug trace is enabled. Error information is captured in 
; ..\MAIN.c	   146      ///  register SBCU_EADD, SBCU_EDAT and SBCU_ECON
; ..\MAIN.c	   147      ///  sample period of request for starvation protection: 64
; ..\MAIN.c	   148      ///  SBCU bus time-out value: 65536 cycles
; ..\MAIN.c	   149  
; ..\MAIN.c	   150      //// this register must be set in the start-up file
; ..\MAIN.c	   151      //// SBCU_CON  =  0x4009FFFF;
; ..\MAIN.c	   152  
; ..\MAIN.c	   153      ///  ---------------------------------------------------------------------
; ..\MAIN.c	   154      ///  Data Memory Interface (DMI):
; ..\MAIN.c	   155      ///  ---------------------------------------------------------------------
; ..\MAIN.c	   156      ///  - No Data Cache
; ..\MAIN.c	   157      ///  - 120 Kbyte Data Memory
; ..\MAIN.c	   158  
; ..\MAIN.c	   159      //// this register must be set in the start-up file
; ..\MAIN.c	   160      //// DMI_CON  =  0x07800782;
; ..\MAIN.c	   161  
; ..\MAIN.c	   162      ///  ---------------------------------------------------------------------
; ..\MAIN.c	   163      ///  Program Memory Interface (PMI):
; ..\MAIN.c	   164      ///  ---------------------------------------------------------------------
; ..\MAIN.c	   165      ///  - No Instruction Cache
; ..\MAIN.c	   166      ///  - 24 Kbyte Program Memory
; ..\MAIN.c	   167  
; ..\MAIN.c	   168      //// this register must be set in the start-up file
; ..\MAIN.c	   169      //// PMI_CON2  =  0x01800183;
; ..\MAIN.c	   170  
; ..\MAIN.c	   171    //// -----------------------------------------------------------------------
; ..\MAIN.c	   172    //// End of Important Settings for the Start-Up File
; ..\MAIN.c	   173    //// -----------------------------------------------------------------------
; ..\MAIN.c	   174  
; ..\MAIN.c	   175    ///  -----------------------------------------------------------------------
; ..\MAIN.c	   176    ///  Clock System:
; ..\MAIN.c	   177    ///  -----------------------------------------------------------------------
; ..\MAIN.c	   178    ///  - external clock frequency: 20.00 MHz
; ..\MAIN.c	   179    ///  - input divider (PDIV): 2
; ..\MAIN.c	   180    ///  - PLL operation (VCOBYP = 0)
; ..\MAIN.c	   181    ///  - VCO range: 600 MHz - 700 MHz
; ..\MAIN.c	   182    ///  - feedback divider (NDIV): 64
; ..\MAIN.c	   183    ///  - the VCO output frequency is: 640.00 MHz
; ..\MAIN.c	   184    ///  - output divider (KDIV): 8
; ..\MAIN.c	   185    ///  - CPU clock: 80.00 MHz
; ..\MAIN.c	   186    ///  - the ratio fcpu /ffpi is  2 / 1
; ..\MAIN.c	   187    ///  - the ratio fcpu /flmb is  1 / 1
; ..\MAIN.c	   188    ///  - the ratio fcpu /fpcp is  1/1
; ..\MAIN.c	   189    ///  - system clock: 40.00 MHz
; ..\MAIN.c	   190  
; ..\MAIN.c	   191  
; ..\MAIN.c	   192     /// Comparing with the Compiler settings
; ..\MAIN.c	   193     if(((SCU_PLLCON0  & 0X1017E00) != 0X1017E00) || ((SCU_PLLCON1 & 0X20007) != 0X20007) \ 
	mov.u	d15,#32256
	addih	d15,d15,#257
	ld.w	d0,0xf0000518
	and	d0,d15
	jne	d15,d0,.L2				; predicted not taken
.L78:
	mov	d15,#7
	addih	d15,d15,#2
	ld.w	d0,0xf000051c
	and	d0,d15
	jne	d15,d0,.L3				; predicted not taken
.L79:

; ..\MAIN.c	   194         || ((SCU_CCUCON0 & 0X1) != 0X1))
	ld.w	d15,0xf0000530
	jnz.t	d15:0,.L4				; predicted taken
.L3:
.L2:

; ..\MAIN.c	   195     {
; ..\MAIN.c	   196  
; ..\MAIN.c	   197    //// - after a software reset PLL refuse to lock again unless oscillator is 
; ..\MAIN.c	   198    ////   disconnected first
; ..\MAIN.c	   199  
; ..\MAIN.c	   200      MAIN_vResetENDINIT();
	lea	a15,0xf00005f0
	ld.w	d15,[a15]
	insert	d4,d15,#0,#0,#1
	call	MAIN_vWriteWDTCON0
	lea	a12,0xf00005f0
.L5:
	ld.bu	d15,[a12]
	jnz.t	d15:0,.L5				; predicted taken
.L80:

; ..\MAIN.c	   201      SCU_PLLCON0_VCOBYP  =  0;    // reset VCO bypass
	lea	a13,0xf0000518
	ld.bu	d15,[a13]
	insert	d15,d15,#0,#0,#1
	st.b	[a13],d15
.L81:

; ..\MAIN.c	   202      SCU_PLLCON0_SETFINDIS  =  1; // disconnect OSC from PLL
	ld.bu	d15,[a13]
	or	d15,#16
	st.b	[a13],d15
.L82:

; ..\MAIN.c	   203      MAIN_vSetENDINIT();
	ld.w	d15,[a15]
	or	d4,d15,#1
.L83:
	call	MAIN_vWriteWDTCON0
.L84:

; ..\MAIN.c	   204  
; ..\MAIN.c	   205  
; ..\MAIN.c	   206      if (!SCU_PLLSTAT_PWDSTAT)
	lea	a14,0xf0000514
	ld.bu	d15,[a14]
	jnz.t	d15:1,.L6				; predicted taken
.L85:

; ..\MAIN.c	   207      {
; ..\MAIN.c	   208        MAIN_vResetENDINIT();
	ld.w	d15,[a15]
	insert	d4,d15,#0,#0,#1
	call	MAIN_vWriteWDTCON0
.L7:
	ld.bu	d15,[a12]
	jnz.t	d15:0,.L7				; predicted taken
.L86:

; ..\MAIN.c	   209        SCU_CCUCON0  =  0x00000001; // set FPI,LMB and PCP dividers
	mov	d15,#1
	st.w	0xf0000530,d15
.L87:

; ..\MAIN.c	   210        SCU_PLLCON0_VCOBYP  =  1;  // set VCO bypass (goto Prescaler Mode)
	ld.bu	d15,[a13]
	or	d15,#1
	st.b	[a13],d15

; ..\MAIN.c	   211        while (!SCU_PLLSTAT_VCOBYST);// wait for prescaler mode
.L8:
	ld.bu	d15,[a14]
	jz.t	d15:0,.L8				; predicted taken
.L88:

; ..\MAIN.c	   212        SCU_PLLCON0  =  0x01057E21; // set P,N divider, connect OSC
	mov.u	d15,#32289
	addih	d15,d15,#261
	st.w	0xf0000518,d15
.L89:

; ..\MAIN.c	   213        SCU_PLLCON1  =  0x00020007; // set K1,K2 divider
	mov	d15,#7
	addih	d15,d15,#2
	st.w	0xf000051c,d15
.L90:

; ..\MAIN.c	   214        MAIN_vSetENDINIT();
	ld.w	d15,[a15]
	or	d4,d15,#1
.L91:
	call	MAIN_vWriteWDTCON0

; ..\MAIN.c	   215        while (SCU_PLLSTAT_VCOLOCK == 0);// wait for LOCK
.L9:
	ld.bu	d15,[a14]
	jz.t	d15:2,.L9				; predicted taken
.L92:

; ..\MAIN.c	   216        MAIN_vResetENDINIT();
	ld.w	d15,[a15]
	insert	d4,d15,#0,#0,#1
	call	MAIN_vWriteWDTCON0
.L10:
	ld.bu	d15,[a12]
	jnz.t	d15:0,.L10				; predicted taken
.L93:

; ..\MAIN.c	   217        SCU_PLLCON0_VCOBYP  =  0;  // Reset VCO bypass (Leave Prescaler Mode)
	ld.bu	d15,[a13]
	insert	d15,d15,#0,#0,#1
	st.b	[a13],d15
.L94:

; ..\MAIN.c	   218        MAIN_vSetENDINIT();
	ld.w	d15,[a15]
	or	d4,d15,#1
.L95:
	call	MAIN_vWriteWDTCON0
.L6:
.L4:

; ..\MAIN.c	   219      }
; ..\MAIN.c	   220     }
; ..\MAIN.c	   221  
; ..\MAIN.c	   222    ///  -----------------------------------------------------------------------
; ..\MAIN.c	   223    ///  Interrupt System:
; ..\MAIN.c	   224    ///  -----------------------------------------------------------------------
; ..\MAIN.c	   225    ///  - four arbitration cycles (max. 255 interrupt sources)
; ..\MAIN.c	   226    ///  - two clocks per arbitration cycle
; ..\MAIN.c	   227  
; ..\MAIN.c	   228    MTCR(0xFE2C,  0x00000000);     // load CPU interrupt control register
	mov	d15,#0
	lea	a15,0xf00005f0
	mtcr	#65068,d15
	isync
.L96:

; ..\MAIN.c	   229    ISYNC();
	isync
.L97:

; ..\MAIN.c	   230  
; ..\MAIN.c	   231    ///  -----------------------------------------------------------------------
; ..\MAIN.c	   232    ///  Peripheral Control Processor (PCP):
; ..\MAIN.c	   233    ///  -----------------------------------------------------------------------
; ..\MAIN.c	   234    ///  - stop the PCP internal clock when PCP is idle
; ..\MAIN.c	   235  
; ..\MAIN.c	   236    ///  - use Full Context save area (R[0] - R[7])
; ..\MAIN.c	   237    ///  - start progam counter as left by last invocation
; ..\MAIN.c	   238    ///  - channel watchdog is disabled
; ..\MAIN.c	   239    ///  - maximum channel number checking is disabled
; ..\MAIN.c	   240  
; ..\MAIN.c	   241    MAIN_vResetENDINIT();
	ld.w	d15,[a15]
	insert	d4,d15,#0,#0,#1
	call	MAIN_vWriteWDTCON0
.L11:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L11				; predicted taken
.L98:

; ..\MAIN.c	   242    PCP_CLC        =  0x00000000;  // load PCP clock control register
	mov	d15,#0
	movh.a	a2,#61444
	st.w	[a2]@los(0xf0043f00),d15
.L99:

; ..\MAIN.c	   243    PCP_CS         =  0x00000200;  // load PCP control and status register
	mov.u	d15,#512
	st.w	[a2]@los(0xf0043f10),d15
.L100:

; ..\MAIN.c	   244    MAIN_vSetENDINIT();
	ld.w	d15,[a15]
	or	d4,d15,#1
.L101:
	call	MAIN_vWriteWDTCON0
.L102:

; ..\MAIN.c	   245  
; ..\MAIN.c	   246    ///  - four arbitration cycles (max. 255 PCP channels)
; ..\MAIN.c	   247    ///  - two clocks per arbitration cycle
; ..\MAIN.c	   248    PCP_ICR        =  0x00000000;  // load PCP interrupt control register
	mov	d15,#0
	movh.a	a2,#61444
	st.w	[a2]@los(0xf0043f20),d15
.L103:

; ..\MAIN.c	   249  
; ..\MAIN.c	   250    ///  - the PCP warning mechanism is disabled
; ..\MAIN.c	   251    PCP_ITR        =  0x00000000;  // load PCP interrupt threshold register
	st.w	[a2]@los(0xf0043f24),d15
.L104:

; ..\MAIN.c	   252  
; ..\MAIN.c	   253    ///  - type of service of PCP node 4 is CPU interrupt
; ..\MAIN.c	   254    PCP_SRC4       =  0x00001000;  // load service request control register 4
	mov.u	d15,#4096
	st.w	[a2]@los(0xf0043fec),d15
.L105:

; ..\MAIN.c	   255  
; ..\MAIN.c	   256    ///  - type of service of PCP node 5 is CPU interrupt
; ..\MAIN.c	   257    PCP_SRC5       =  0x00001000;  // load service request control register 5
	st.w	[a2]@los(0xf0043fe8),d15
.L106:

; ..\MAIN.c	   258  
; ..\MAIN.c	   259    ///  - type of service of PCP node 6 is CPU interrupt
; ..\MAIN.c	   260    PCP_SRC6       =  0x00001000;  // load service request control register 6
	st.w	[a2]@los(0xf0043fe4),d15
.L107:

; ..\MAIN.c	   261  
; ..\MAIN.c	   262    ///  - type of service of PCP node 7 is CPU interrupt
; ..\MAIN.c	   263    PCP_SRC7       =  0x00001000;  // load service request control register 7
	st.w	[a2]@los(0xf0043fe0),d15
.L108:

; ..\MAIN.c	   264  
; ..\MAIN.c	   265    ///  - type of service of PCP node 8 is CPU interrupt
; ..\MAIN.c	   266    PCP_SRC8       =  0x00001000;  // load service request control register 8
	st.w	[a2]@los(0xf0043fdc),d15
.L109:

; ..\MAIN.c	   267  
; ..\MAIN.c	   268    ///  -----------------------------------------------------------------------
; ..\MAIN.c	   269    ///  Configuration of the DMA Module Clock:
; ..\MAIN.c	   270    ///  -----------------------------------------------------------------------
; ..\MAIN.c	   271    ///  - enable the DMA module
; ..\MAIN.c	   272  
; ..\MAIN.c	   273    MAIN_vResetENDINIT();
	ld.w	d15,[a15]
	insert	d4,d15,#0,#0,#1
	call	MAIN_vWriteWDTCON0
.L12:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L12				; predicted taken
.L110:

; ..\MAIN.c	   274    DMA_CLC        =  0x00000008;  // DMA clock control register
	mov	d15,#8
	st.w	0xf0003c00,d15
.L111:

; ..\MAIN.c	   275    DummyToForceRead  =  DMA_CLC;  // read it back to ensure it is read
	movh.a	a2,#@his(DummyToForceRead)
	ld.w	d15,0xf0003c00
	st.w	[a2]@los(DummyToForceRead),d15
.L112:

; ..\MAIN.c	   276    MAIN_vSetENDINIT();
	ld.w	d15,[a15]
	or	d4,d15,#1
.L113:
	call	MAIN_vWriteWDTCON0
.L114:

; ..\MAIN.c	   277  
; ..\MAIN.c	   278    //   -----------------------------------------------------------------------
; ..\MAIN.c	   279    //   Initialization of the Peripherals:
; ..\MAIN.c	   280    //   -----------------------------------------------------------------------
; ..\MAIN.c	   281    //   initializes the Asynchronous Synchronous Serial Interface 0 (ASC0)
; ..\MAIN.c	   282    ASC0_vInit();
	call	ASC0_vInit
.L115:

; ..\MAIN.c	   283  
; ..\MAIN.c	   284  
; ..\MAIN.c	   285    // USER CODE BEGIN (Init,3)
; ..\MAIN.c	   286  
; ..\MAIN.c	   287    // USER CODE END
; ..\MAIN.c	   288  
; ..\MAIN.c	   289    ///  -----------------------------------------------------------------------
; ..\MAIN.c	   290    ///  System Start Conditions:
; ..\MAIN.c	   291    ///  -----------------------------------------------------------------------
; ..\MAIN.c	   292  
; ..\MAIN.c	   293    ///  - the CPU interrupt system is globally enabled
; ..\MAIN.c	   294    ENABLE();
	enable
.L116:

; ..\MAIN.c	   295  
; ..\MAIN.c	   296    //// - the PCP interrupt system is globally disabled
; ..\MAIN.c	   297  
; ..\MAIN.c	   298  
; ..\MAIN.c	   299    // USER CODE BEGIN (Init,4)
; ..\MAIN.c	   300  
; ..\MAIN.c	   301    // USER CODE END
; ..\MAIN.c	   302  
; ..\MAIN.c	   303  } //  End of function MAIN_vInit
	ret
.L49:
	
__MAIN_vInit_function_end:
	.size	MAIN_vInit,__MAIN_vInit_function_end-MAIN_vInit
.L37:
	; End of function
	
	.sdecl	'.text.MAIN.MAIN_vWriteWDTCON0',code,cluster('MAIN_vWriteWDTCON0')
	.sect	'.text.MAIN.MAIN_vWriteWDTCON0'
	.align	2
	
	.global	MAIN_vWriteWDTCON0

; ..\MAIN.c	   304  
; ..\MAIN.c	   305  
; ..\MAIN.c	   306  //****************************************************************************
; ..\MAIN.c	   307  // @Function      void MAIN_vWriteWDTCON0(uword uwValue) 
; ..\MAIN.c	   308  //
; ..\MAIN.c	   309  //----------------------------------------------------------------------------
; ..\MAIN.c	   310  // @Description   This function writes the parameter uwValue to the WDT_CON0 
; ..\MAIN.c	   311  //                register which is password protected. 
; ..\MAIN.c	   312  //
; ..\MAIN.c	   313  //----------------------------------------------------------------------------
; ..\MAIN.c	   314  // @Returnvalue   None
; ..\MAIN.c	   315  //
; ..\MAIN.c	   316  //----------------------------------------------------------------------------
; ..\MAIN.c	   317  // @Parameters    uwValue: 
; ..\MAIN.c	   318  //                Value for the WDTCON0 register
; ..\MAIN.c	   319  //
; ..\MAIN.c	   320  //----------------------------------------------------------------------------
; ..\MAIN.c	   321  // @Date          2015/1/11
; ..\MAIN.c	   322  //
; ..\MAIN.c	   323  //****************************************************************************
; ..\MAIN.c	   324  
; ..\MAIN.c	   325  // USER CODE BEGIN (WriteWDTCON0,1)
; ..\MAIN.c	   326  
; ..\MAIN.c	   327  // USER CODE END
; ..\MAIN.c	   328  
; ..\MAIN.c	   329  void MAIN_vWriteWDTCON0(uword uwValue)
; Function MAIN_vWriteWDTCON0
.L21:
MAIN_vWriteWDTCON0:	.type	func

; ..\MAIN.c	   330  {
; ..\MAIN.c	   331    uword uwDummy;
; ..\MAIN.c	   332  
; ..\MAIN.c	   333    uwDummy        =  WDT_CON0;   
	lea	a15,0xf00005f0
	ld.w	d15,[a15]
.L54:

; ..\MAIN.c	   334    uwDummy |=  0x000000F0;       //  set HWPW1 = 1111b
; ..\MAIN.c	   335  
; ..\MAIN.c	   336    if(WDT_CON1_DR)
	or	d15,#240
	lea	a2,0xf00005f4
	ld.bu	d0,[a2]
	jz.t	d0:3,.L13				; prediction unknown
.L70:

; ..\MAIN.c	   337    {
; ..\MAIN.c	   338      uwDummy |=  0x00000008;     //  set HWPW0 = WDTDR
	or	d15,#8
	j	.L14
.L13:

; ..\MAIN.c	   339    }
; ..\MAIN.c	   340    else
; ..\MAIN.c	   341    {
; ..\MAIN.c	   342      uwDummy &= ~0x00000008;     //  set HWPW0 = WDTDR
	insert	d15,d15,#0,#3,#1
.L14:

; ..\MAIN.c	   343    }
; ..\MAIN.c	   344    if(WDT_CON1_IR)
	ld.bu	d0,[a2]
	jz.t	d0:2,.L15				; prediction unknown
.L71:

; ..\MAIN.c	   345    {
; ..\MAIN.c	   346      uwDummy |=  0x00000004;     //  set HWPW0 = WDTIR
	or	d15,#4
	j	.L16
.L15:

; ..\MAIN.c	   347    }
; ..\MAIN.c	   348    else
; ..\MAIN.c	   349    {
; ..\MAIN.c	   350      uwDummy &= ~0x00000004;     //  set HWPW0 = WDTIR
	insert	d15,d15,#0,#2,#1
.L16:

; ..\MAIN.c	   351    }
; ..\MAIN.c	   352  
; ..\MAIN.c	   353    uwDummy &= ~0x00000002;       //  set WDTLCK = 0
; ..\MAIN.c	   354    WDT_CON0 =  uwDummy;          //  unlock access
	insert	d15,d15,#0,#1,#1
	st.w	[a15],d15
.L72:

; ..\MAIN.c	   355  
; ..\MAIN.c	   356    uwValue  |=  0x000000F2;      //  set HWPW1 = 1111b and WDTLCK = 1
	or	d15,d4,#242
.L55:

; ..\MAIN.c	   357    uwValue  &= ~0x0000000C;      //  set HWPW0 = 00b
; ..\MAIN.c	   358    WDT_CON0  =  uwValue;         //  write access and lock
	insert	d15,d15,#0,#2,#2
	st.w	[a15],d15
.L73:

; ..\MAIN.c	   359  
; ..\MAIN.c	   360  } //  End of function MAIN_vWriteWDTCON0
	ret
.L45:
	
__MAIN_vWriteWDTCON0_function_end:
	.size	MAIN_vWriteWDTCON0,__MAIN_vWriteWDTCON0_function_end-MAIN_vWriteWDTCON0
.L32:
	; End of function
	
	.sdecl	'.text.MAIN.main',code,cluster('main')
	.sect	'.text.MAIN.main'
	.align	2
	
	.global	main

; ..\MAIN.c	   361  
; ..\MAIN.c	   362  
; ..\MAIN.c	   363  //****************************************************************************
; ..\MAIN.c	   364  // @Function      sword main(void) 
; ..\MAIN.c	   365  //
; ..\MAIN.c	   366  //----------------------------------------------------------------------------
; ..\MAIN.c	   367  // @Description   This is the main function.
; ..\MAIN.c	   368  //
; ..\MAIN.c	   369  //----------------------------------------------------------------------------
; ..\MAIN.c	   370  // @Returnvalue   Returns an sword value
; ..\MAIN.c	   371  //
; ..\MAIN.c	   372  //----------------------------------------------------------------------------
; ..\MAIN.c	   373  // @Parameters    None
; ..\MAIN.c	   374  //
; ..\MAIN.c	   375  //----------------------------------------------------------------------------
; ..\MAIN.c	   376  // @Date          2015/1/11
; ..\MAIN.c	   377  //
; ..\MAIN.c	   378  //****************************************************************************
; ..\MAIN.c	   379  
; ..\MAIN.c	   380  // USER CODE BEGIN (Main,1)
; ..\MAIN.c	   381  
; ..\MAIN.c	   382  // USER CODE END
; ..\MAIN.c	   383  
; ..\MAIN.c	   384  sword main(void)
; Function main
.L23:
main:	.type	func

; ..\MAIN.c	   385  {
; ..\MAIN.c	   386    sword swReturn;
; ..\MAIN.c	   387  
; ..\MAIN.c	   388    // USER CODE BEGIN (Main,2)
; ..\MAIN.c	   389  
; ..\MAIN.c	   390    // USER CODE END
; ..\MAIN.c	   391  
; ..\MAIN.c	   392    swReturn = 0;
; ..\MAIN.c	   393  
; ..\MAIN.c	   394    switch(RESET_INDICATOR)
	ld.w	d15,0xf0000550
.L121:

; ..\MAIN.c	   395    {
; ..\MAIN.c	   396      case WATCHDOG_RESET:         //  the last reset was a watchdog triggered
; ..\MAIN.c	   397                                   //  (hardware) reset
; ..\MAIN.c	   398  
; ..\MAIN.c	   399           // USER CODE BEGIN (Main,3)
; ..\MAIN.c	   400  
; ..\MAIN.c	   401           // USER CODE END
; ..\MAIN.c	   402  
; ..\MAIN.c	   403      case SOFTWARE_RESET:         //  the last reset was an internally 
; ..\MAIN.c	   404                                   //  triggered software reset
; ..\MAIN.c	   405  
; ..\MAIN.c	   406           // USER CODE BEGIN (Main,4)
; ..\MAIN.c	   407  
; ..\MAIN.c	   408           // USER CODE END
; ..\MAIN.c	   409  
; ..\MAIN.c	   410      case ESR0_RESET:             //  the last reset was an externally 
; ..\MAIN.c	   411                                   //  triggered hardware reset (#ESR0 pin)
; ..\MAIN.c	   412  
; ..\MAIN.c	   413           // USER CODE BEGIN (Main,4.1)
; ..\MAIN.c	   414  
; ..\MAIN.c	   415           // USER CODE END
; ..\MAIN.c	   416  
; ..\MAIN.c	   417      case ESR1_RESET:             //  the last reset was an externally 
; ..\MAIN.c	   418                                   //  triggered hardware reset (#ESR1 pin)
; ..\MAIN.c	   419  
; ..\MAIN.c	   420           // USER CODE BEGIN (Main,4.2)
; ..\MAIN.c	   421  
; ..\MAIN.c	   422           // USER CODE END
; ..\MAIN.c	   423  
; ..\MAIN.c	   424      case POWERON_RESET:          //  the last reset was an externally
; ..\MAIN.c	   425                                   //  triggered power on reset (#POR pin)
; ..\MAIN.c	   426  
; ..\MAIN.c	   427           // USER CODE BEGIN (Main,5)
; ..\MAIN.c	   428  
; ..\MAIN.c	   429           // USER CODE END
; ..\MAIN.c	   430  
; ..\MAIN.c	   431      default:
; ..\MAIN.c	   432  
; ..\MAIN.c	   433           // USER CODE BEGIN (Main,6)
; ..\MAIN.c	   434  
; ..\MAIN.c	   435           // USER CODE END
; ..\MAIN.c	   436  
; ..\MAIN.c	   437           MAIN_vInit();
	call	MAIN_vInit

; ..\MAIN.c	   438    }
; ..\MAIN.c	   439  
; ..\MAIN.c	   440  
; ..\MAIN.c	   441           // USER CODE BEGIN (Main,7)
; ..\MAIN.c	   442       while(1)
.L17:

; ..\MAIN.c	   443       {
; ..\MAIN.c	   444          int i;
; ..\MAIN.c	   445          for(i=0;i<100000;i++);
; ..\MAIN.c	   446          ASC0_vSendData('a');
	mov.u	d4,#97
	call	ASC0_vSendData
.L52:
	j	.L17
.L51:
	
__main_function_end:
	.size	main,__main_function_end-main
.L42:
	; End of function
	
	.sdecl	'.bss.MAIN.DummyToForceRead',data,cluster('DummyToForceRead')
	.sect	'.bss.MAIN.DummyToForceRead'
	.global	DummyToForceRead
	.align	2
DummyToForceRead:	.type	object
	.size	DummyToForceRead,4
	.space	4
	.calls	'MAIN_vInit','MAIN_vWriteWDTCON0'
	.calls	'MAIN_vInit','ASC0_vInit'
	.calls	'main','MAIN_vInit'
	.calls	'main','ASC0_vSendData'
	.calls	'MAIN_vInit','',0
	.calls	'MAIN_vWriteWDTCON0','',0
	.extern	ASC0_vInit
	.extern	ASC0_vSendData
	.calls	'main','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L25:
	.word	937
	.half	3
	.word	.L26
	.byte	4
.L24:
	.byte	1
	.byte	'..\\MAIN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\InfineonToolsSetup\\TaskingProject\\ASC\\Debug\\',0,12,1
	.word	.L27
	.byte	2
	.byte	'__mtcr',0,1,1,1,1,3
	.word	.L50-.L25
	.byte	3
	.word	.L50-.L25
	.byte	0
.L50:
	.byte	4
	.byte	'int',0,4,5,5
	.byte	'__isync',0,1,1,1,1,5
	.byte	'__enable',0,1,1,1,1
.L46:
	.byte	4
	.byte	'unsigned int',0,4,7,6
	.byte	'ASC0_vInit',0,1,87,6,1,1,1,1,7
	.byte	'ASC0_vSendData',0,1,88,6,1,1,1,1,8
	.byte	'usData',0,1,88,28
	.word	.L56-.L25
	.byte	0
.L56:
	.byte	4
	.byte	'unsigned short int',0,2,7,9
	.byte	'__size_t',0,2,1,1
	.word	176
	.byte	9
	.byte	'__codeptr',0,2,1,1
	.word	.L57-.L25
.L57:
	.byte	10
	.word	.L58-.L25
.L58:
	.byte	11,1,9
	.byte	'ushort',0,3,71,24
	.word	250
	.byte	9
	.byte	'uword',0,3,73,24
	.word	176
	.byte	9
	.byte	'sword',0,3,74,24
	.word	142
	.byte	9
	.byte	'T_Reg32',0,3,110,4
	.word	.L59-.L25
.L59:
	.byte	12
	.word	.L60-.L25
.L60:
	.byte	13,3,76,18,4,14
	.byte	'bit0',0,1
	.word	.L61-.L25
	.byte	1,7,2,35,0,14
	.byte	'bit1',0,1
	.word	.L61-.L25
	.byte	1,6,2,35,0,14
	.byte	'bit2',0,1
	.word	.L61-.L25
	.byte	1,5,2,35,0,14
	.byte	'bit3',0,1
	.word	.L61-.L25
	.byte	1,4,2,35,0,14
	.byte	'bit4',0,1
	.word	.L61-.L25
	.byte	1,3,2,35,0,14
	.byte	'bit5',0,1
	.word	.L61-.L25
	.byte	1,2,2,35,0,14
	.byte	'bit6',0,1
	.word	.L61-.L25
	.byte	1,1,2,35,0,14
	.byte	'bit7',0,1
	.word	.L61-.L25
	.byte	1,0,2,35,0,14
	.byte	'bit8',0,1
	.word	.L61-.L25
	.byte	1,7,2,35,1,14
	.byte	'bit9',0,1
	.word	.L61-.L25
	.byte	1,6,2,35,1,14
	.byte	'bit10',0,1
	.word	.L61-.L25
	.byte	1,5,2,35,1,14
	.byte	'bit11',0,1
	.word	.L61-.L25
	.byte	1,4,2,35,1,14
	.byte	'bit12',0,1
	.word	.L61-.L25
	.byte	1,3,2,35,1,14
	.byte	'bit13',0,1
	.word	.L61-.L25
	.byte	1,2,2,35,1,14
	.byte	'bit14',0,1
	.word	.L61-.L25
	.byte	1,1,2,35,1,14
	.byte	'bit15',0,1
	.word	.L61-.L25
	.byte	1,0,2,35,1,14
	.byte	'bit16',0,1
	.word	.L61-.L25
	.byte	1,7,2,35,2,14
	.byte	'bit17',0,1
	.word	.L61-.L25
	.byte	1,6,2,35,2,14
	.byte	'bit18',0,1
	.word	.L61-.L25
	.byte	1,5,2,35,2,14
	.byte	'bit19',0,1
	.word	.L61-.L25
	.byte	1,4,2,35,2,14
	.byte	'bit20',0,1
	.word	.L61-.L25
	.byte	1,3,2,35,2,14
	.byte	'bit21',0,1
	.word	.L61-.L25
	.byte	1,2,2,35,2,14
	.byte	'bit22',0,1
	.word	.L61-.L25
	.byte	1,1,2,35,2,14
	.byte	'bit23',0,1
	.word	.L61-.L25
	.byte	1,0,2,35,2,14
	.byte	'bit24',0,1
	.word	.L61-.L25
	.byte	1,7,2,35,3,14
	.byte	'bit25',0,1
	.word	.L61-.L25
	.byte	1,6,2,35,3,14
	.byte	'bit26',0,1
	.word	.L61-.L25
	.byte	1,5,2,35,3,14
	.byte	'bit27',0,1
	.word	.L61-.L25
	.byte	1,4,2,35,3,14
	.byte	'bit28',0,1
	.word	.L61-.L25
	.byte	1,3,2,35,3,14
	.byte	'bit29',0,1
	.word	.L61-.L25
	.byte	1,2,2,35,3,14
	.byte	'bit30',0,1
	.word	.L61-.L25
	.byte	1,1,2,35,3,14
	.byte	'bit31',0,1
	.word	.L61-.L25
	.byte	1,0,2,35,3,0
.L61:
	.byte	4
	.byte	'unsigned char',0,1,8
.L53:
	.byte	12
	.word	176
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L26:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,54,15,39,12,63,12,60,12,0,0,3,5,0,73,19,0,0,4
	.byte	36,0,3,8,11,15,62,15,0,0,5,46,0,3,8,54,15,39,12,63,12,60,12,0,0,6,46,0,3,8,58,15,59,15,57,15,54,15,39
	.byte	12,63,12,60,12,0,0,7,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,8,5,0,3,8,58,15,59,15,57,15
	.byte	73,19,0,0,9,22,0,3,8,58,15,59,15,57,15,73,19,0,0,10,15,0,73,19,0,0,11,21,0,54,15,0,0,12,53,0,73,19,0,0
	.byte	13,19,1,58,15,59,15,57,15,11,15,0,0,14,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L27:
	.word	.L63-.L62
.L62:
	.half	3
	.word	.L65-.L64
.L64:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\ASC0.h',0,0,0,0
	.byte	'..\\MAIN.c',0,0,0,0
	.byte	'..\\MAIN.h',0,0,0,0,0
.L65:
.L63:
	.sdecl	'.debug_info',debug,cluster('MAIN_vWriteWDTCON0')
	.sect	'.debug_info'
.L28:
	.word	217
	.half	3
	.word	.L29
	.byte	4,1
	.byte	'..\\MAIN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\InfineonToolsSetup\\TaskingProject\\ASC\\Debug\\',0,12,1
	.word	.L31,.L30
	.byte	2
	.word	.L24
	.byte	3
	.byte	'MAIN_vWriteWDTCON0',0,1,201,2,6,1,1,1
	.word	.L21,.L45,.L20
	.byte	4
	.byte	'uwValue',0,1,201,2,31
	.word	.L46,.L47
	.byte	5
	.word	.L21,.L45
	.byte	6
	.byte	'uwDummy',0,1,203,2,9
	.word	.L46,.L48
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('MAIN_vWriteWDTCON0')
	.sect	'.debug_abbrev'
.L29:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('MAIN_vWriteWDTCON0')
	.sect	'.debug_line'
.L30:
	.word	.L67-.L66
.L66:
	.half	3
	.word	.L69-.L68
.L68:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\MAIN.c',0,0,0,0,0
.L69:
	.byte	5,29,7,0,5,2
	.word	.L21
	.byte	3,204,2,1,5,25,9
	.half	.L54-.L21
	.byte	3,1,1,5,3,3,2,1,5,27,9
	.half	.L70-.L54
	.byte	3,2,1,9
	.half	.L13-.L70
	.byte	3,4,1,5,3,9
	.half	.L14-.L13
	.byte	3,2,1,5,27,9
	.half	.L71-.L14
	.byte	3,2,1,9
	.half	.L15-.L71
	.byte	3,4,1,5,25,9
	.half	.L16-.L15
	.byte	3,3,1,5,22,3,1,1,5,26,9
	.half	.L72-.L16
	.byte	3,2,1,9
	.half	.L55-.L72
	.byte	3,1,1,5,23,3,1,1,5,1,9
	.half	.L73-.L55
	.byte	3,2,1,7,9
	.half	.L32-.L73
	.byte	0,1,1
.L67:
	.sdecl	'.debug_ranges',debug,cluster('MAIN_vWriteWDTCON0')
	.sect	'.debug_ranges'
.L31:
	.word	-1,.L21,0,.L32-.L21,0,0
	.sdecl	'.debug_info',debug,cluster('MAIN_vInit')
	.sect	'.debug_info'
.L33:
	.word	166
	.half	3
	.word	.L34
	.byte	4,1
	.byte	'..\\MAIN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\InfineonToolsSetup\\TaskingProject\\ASC\\Debug\\',0,12,1
	.word	.L36,.L35
	.byte	2
	.word	.L24
	.byte	3
	.byte	'MAIN_vInit',0,1,128,1,6,1,1,1
	.word	.L19,.L49,.L18
	.byte	4
	.word	.L19,.L49
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('MAIN_vInit')
	.sect	'.debug_abbrev'
.L34:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('MAIN_vInit')
	.sect	'.debug_line'
.L35:
	.word	.L75-.L74
.L74:
	.half	3
	.word	.L77-.L76
.L76:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\MAIN.c',0,0,0,0,0
.L77:
	.byte	5,7,7,0,5,2
	.word	.L19
	.byte	3,192,1,1,5,77,9
	.half	.L78-.L19
	.byte	1,5,32,9
	.half	.L79-.L78
	.byte	3,1,1,5,5,9
	.half	.L2-.L79
	.byte	3,6,1,5,29,9
	.half	.L80-.L2
	.byte	3,1,1,5,32,9
	.half	.L81-.L80
	.byte	3,1,1,5,5,9
	.half	.L82-.L81
	.byte	3,1,1,5,23,9
	.half	.L83-.L82
	.byte	1,5,10,9
	.half	.L84-.L83
	.byte	3,3,1,5,7,9
	.half	.L85-.L84
	.byte	3,2,1,5,33,9
	.half	.L86-.L85
	.byte	3,1,1,5,31,9
	.half	.L87-.L86
	.byte	3,1,1,5,15,9
	.half	.L8-.L87
	.byte	3,1,1,5,33,9
	.half	.L88-.L8
	.byte	3,1,1,9
	.half	.L89-.L88
	.byte	3,1,1,5,7,9
	.half	.L90-.L89
	.byte	3,1,1,5,25,9
	.half	.L91-.L90
	.byte	1,5,38,9
	.half	.L9-.L91
	.byte	3,1,1,5,7,9
	.half	.L92-.L9
	.byte	3,1,1,5,31,9
	.half	.L93-.L92
	.byte	3,1,1,5,7,9
	.half	.L94-.L93
	.byte	3,1,1,5,25,9
	.half	.L95-.L94
	.byte	1,5,28,9
	.half	.L4-.L95
	.byte	3,10,1,5,10,9
	.half	.L96-.L4
	.byte	3,1,1,5,3,9
	.half	.L97-.L96
	.byte	3,12,1,5,31,9
	.half	.L98-.L97
	.byte	3,1,1,9
	.half	.L99-.L98
	.byte	3,1,1,5,3,9
	.half	.L100-.L99
	.byte	3,1,1,5,21,9
	.half	.L101-.L100
	.byte	1,5,31,9
	.half	.L102-.L101
	.byte	3,4,1,9
	.half	.L103-.L102
	.byte	3,3,1,9
	.half	.L104-.L103
	.byte	3,3,1,9
	.half	.L105-.L104
	.byte	3,3,1,9
	.half	.L106-.L105
	.byte	3,3,1,9
	.half	.L107-.L106
	.byte	3,3,1,9
	.half	.L108-.L107
	.byte	3,3,1,5,3,9
	.half	.L109-.L108
	.byte	3,7,1,5,31,9
	.half	.L110-.L109
	.byte	3,1,1,9
	.half	.L111-.L110
	.byte	3,1,1,5,3,9
	.half	.L112-.L111
	.byte	3,1,1,5,21,9
	.half	.L113-.L112
	.byte	1,5,15,9
	.half	.L114-.L113
	.byte	3,6,1,5,11,9
	.half	.L115-.L114
	.byte	3,12,1,5,1,9
	.half	.L116-.L115
	.byte	3,9,1,7,9
	.half	.L37-.L116
	.byte	0,1,1
.L75:
	.sdecl	'.debug_ranges',debug,cluster('MAIN_vInit')
	.sect	'.debug_ranges'
.L36:
	.word	-1,.L19,0,.L37-.L19,0,0
	.sdecl	'.debug_info',debug,cluster('main')
	.sect	'.debug_info'
.L38:
	.word	174
	.half	3
	.word	.L39
	.byte	4,1
	.byte	'..\\MAIN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\InfineonToolsSetup\\TaskingProject\\ASC\\Debug\\',0,12,1
	.word	.L41,.L40
	.byte	2
	.word	.L24
	.byte	3
	.byte	'main',0,1,128,3,7
	.word	.L50
	.byte	1,1,1
	.word	.L23,.L51,.L22
	.byte	4
	.word	.L23,.L51
	.byte	5
	.word	.L17,.L52
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('main')
	.sect	'.debug_abbrev'
.L39:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('main')
	.sect	'.debug_line'
.L40:
	.word	.L118-.L117
.L117:
	.half	3
	.word	.L120-.L119
.L119:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\MAIN.c',0,0,0,0,0
.L120:
	.byte	5,3,7,0,5,2
	.word	.L23
	.byte	3,137,3,1,5,22,9
	.half	.L121-.L23
	.byte	3,43,1,5,28,9
	.half	.L17-.L121
	.byte	3,9,1,5,13,9
	.half	.L52-.L17
	.byte	3,124,1,5,1,9
	.half	.L42-.L52
	.byte	3,10,0,1,1
.L118:
	.sdecl	'.debug_ranges',debug,cluster('main')
	.sect	'.debug_ranges'
.L41:
	.word	-1,.L23,0,.L42-.L23,0,0
	.sdecl	'.debug_info',debug,cluster('DummyToForceRead')
	.sect	'.debug_info'
.L43:
	.word	149
	.half	3
	.word	.L44
	.byte	4,1
	.byte	'..\\MAIN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\InfineonToolsSetup\\TaskingProject\\ASC\\Debug\\',0,12,1,2
	.word	.L24
	.byte	3
	.byte	'DummyToForceRead',0,2,82,23
	.word	.L53
	.byte	1,5,3
	.word	DummyToForceRead
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('DummyToForceRead')
	.sect	'.debug_abbrev'
.L44:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('MAIN_vInit')
	.sect	'.debug_loc'
.L18:
	.word	-1,.L19,.L19-.L19,.L49-.L19
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('MAIN_vWriteWDTCON0')
	.sect	'.debug_loc'
.L20:
	.word	-1,.L21,.L21-.L21,.L45-.L21
	.half	2
	.byte	138,0
	.word	0,0
.L48:
	.word	-1,.L21,.L54-.L21,.L55-.L21
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L47:
	.word	-1,.L21,.L55-.L21,.L45-.L21
	.half	5
	.byte	144,39,157,32,32
	.word	.L21-.L21,.L55-.L21
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('main')
	.sect	'.debug_loc'
.L22:
	.word	-1,.L23,.L23-.L23,.L51-.L23
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L122:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,26,8,27,8,28,8,29,8,30,8,31,8,16,8,17,8,24,8,25,8,32,8,33,8,34,8,35,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('MAIN_vInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L122,.L19,.L49-.L19
	.sdecl	'.debug_frame',debug,cluster('MAIN_vWriteWDTCON0')
	.sect	'.debug_frame'
	.word	24
	.word	.L122,.L21,.L45-.L21
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('main')
	.sect	'.debug_frame'
	.word	12
	.word	.L122,.L23,.L51-.L23

; ..\MAIN.c	   447       }
; ..\MAIN.c	   448           // USER CODE END
; ..\MAIN.c	   449  
; ..\MAIN.c	   450    return(swReturn);
; ..\MAIN.c	   451  
; ..\MAIN.c	   452  } //  End of function main
; ..\MAIN.c	   453  
; ..\MAIN.c	   454  
; ..\MAIN.c	   455  
; ..\MAIN.c	   456  // USER CODE BEGIN (MAIN_General,10)
; ..\MAIN.c	   457  
; ..\MAIN.c	   458  // USER CODE END
; ..\MAIN.c	   459  

	; Module end
