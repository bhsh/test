{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fnil MS Sans Serif;}{\f1\fnil\fcharset2 Symbol;}{\f2\fswiss\fprq2 System;}{\f3\fnil Times New Roman;}{\f4\fswiss\fprq2 Arial;}}
{\colortbl\red0\green0\blue0;\red0\green0\blue128;\red255\green0\blue0;}
\deflang1031\pard\plain\f4\fs28\cf0 DAvE's Project Documentation
\par \plain\f4\fs22\cf0
\par \plain\f4\fs22\cf0 Project: \tab\tab\b ASC.dav
\par 
\par \plain\f4\fs22\cf0 Controller: \tab\tab\b TC1728
\par \plain\f4\fs22\cf0 Compiler: \tab\tab\b Tasking 3.5r1
\par 
\par \plain\f4\fs22\cf0 Date: \tab\tab\tab\b 2015/1/11 12:44:17
\par 
\par 
\par \plain\f4\fs22\cf2\b Please read this document carefully and note
\par \plain\f4\fs22\cf2\b the red-colored hints.
\par 
\par \plain\f4\fs22\cf2\b If you miss a file in the generated files list
\par \plain\f4\fs22\cf2\b maybe you have forgotten to select the
\par \plain\f4\fs22\cf2\b initialisation function of the related module.
\par 
\par \plain\f4\fs22\cf0 Generated Files:
\plain\f4\fs20\cf0\b
\par \tab\tab\tab TC1728REGS.H
\par \tab\tab\tab MAIN.H
\par \tab\tab\tab MAIN.C
\par \tab\tab\tab ASC0.H
\par \tab\tab\tab ASC0.C
\par 
\par 
\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul Project Settings
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab MAIN_vSetENDINIT()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro sets the EndInit bit, which controls access to

\par \tab \tab system critical registers. Setting the EndInit bit locks

\par \tab \tab all EndInit protected registers.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par
\par \plain\f4\fs20\cf0 \tab Macro:
\par \plain\f4\fs20\cf0\b \tab \tab MAIN_vResetENDINIT()\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This macro clears the EndInit bit, which controls access to

\par \tab \tab system critical registers. Clearing the EndInit bit unlocks

\par \tab \tab all EndInit protected registers. Modifications of the

\par \tab \tab EndInit bit are monitored by the watchdog timer such that

\par \tab \tab after clearing EndInit, the watchdog timer enters a defined

\par \tab \tab time-out mode; EndInit must be set again before the

\par \tab \tab time-out expires.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void MAIN_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function initializes the microcontroller.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void MAIN_vWriteWDTCON0(uword uwValue)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function writes the parameter uwValue to the WDT_CON0

\par \tab \tab register which is password protected.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab uwValue:

\par \tab \tab Value for the WDTCON0 register

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab sword main(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the main function.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b Returns an sword value\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab \cf2Begin of Important Settings for the Start-Up File\cf0\par 
\tab All following settings must be set in the start-up file. You can use\par 
\tab DAvE's project file (*.dpt) to include this register values into your\par 
\tab compiler EDE.\par 
\par 
\tab System Peripheral Bus Control Unit (SBCU):\par 
\tab SBCU starvation protection is enabled\par 
\tab the debug trace is enabled. Error information is captured in\par 
\tab register SBCU_EADD, SBCU_EDAT and SBCU_ECON\par 
\tab sample period of request for starvation protection: 64\par 
\tab SBCU bus time-out value: 65536 cycles\par 
\par 
\tab \cf2this register must be set in the start-up file\cf0\par 
\tab \cf2SBCU_CON  =  0x4009FFFF;\cf0\par 
\par 
\tab Data Memory Interface (DMI):\par 
\tab - No Data Cache\par 
\tab - 120 Kbyte Data Memory\par 
\par 
\tab \cf2this register must be set in the start-up file\cf0\par 
\tab \cf2DMI_CON  =  0x07800782;\cf0\par 
\par 
\tab Program Memory Interface (PMI):\par 
\tab - No Instruction Cache\par 
\tab - 24 Kbyte Program Memory\par 
\par 
\tab \cf2this register must be set in the start-up file\cf0\par 
\tab \cf2PMI_CON2  =  0x01800183;\cf0\par 
\par 
\tab \cf2End of Important Settings for the Start-Up File\cf0\par 
\par 
\tab Clock System:\par 
\tab - external clock frequency: 20.00 MHz\par 
\tab - input divider (PDIV): 2\par 
\tab - PLL operation (VCOBYP = 0)\par 
\tab - VCO range: 600 MHz - 700 MHz\par 
\tab - feedback divider (NDIV): 64\par 
\tab - the VCO output frequency is: 640.00 MHz\par 
\tab - output divider (KDIV): 8\par 
\tab - CPU clock: 80.00 MHz\par 
\tab - the ratio fcpu /ffpi is  2 / 1\par 
\tab - the ratio fcpu /flmb is  1 / 1\par 
\tab - the ratio fcpu /fpcp is  1/1\par 
\tab - system clock: 40.00 MHz\par 
\par 
\tab Comparing with the Compiler settings\par 
\par 
\tab \cf2- after a software reset PLL refuse to lock again unless oscillator is\cf0\par 
\tab \cf2disconnected first\cf0\par 
\par 
\tab Interrupt System:\par 
\tab - four arbitration cycles (max. 255 interrupt sources)\par 
\tab - two clocks per arbitration cycle\par 
\par 
\tab Peripheral Control Processor (PCP):\par 
\tab - stop the PCP internal clock when PCP is idle\par 
\par 
\tab - use Full Context save area (R[0] - R[7])\par 
\tab - start progam counter as left by last invocation\par 
\tab - channel watchdog is disabled\par 
\tab - maximum channel number checking is disabled\par 
\par 
\tab - four arbitration cycles (max. 255 PCP channels)\par 
\tab - two clocks per arbitration cycle\par 
\par 
\tab - the PCP warning mechanism is disabled\par 
\par 
\tab - type of service of PCP node 4 is CPU interrupt\par 
\par 
\tab - type of service of PCP node 5 is CPU interrupt\par 
\par 
\tab - type of service of PCP node 6 is CPU interrupt\par 
\par 
\tab - type of service of PCP node 7 is CPU interrupt\par 
\par 
\tab - type of service of PCP node 8 is CPU interrupt\par 
\par 
\tab Configuration of the DMA Module Clock:\par 
\tab - enable the DMA module\par 
\par 
\tab System Start Conditions:\par 
\par 
\tab - the CPU interrupt system is globally enabled\par 
\par 
\tab \cf2- the PCP interrupt system is globally disabled\cf0\par 
\par 

\par \plain\f4\fs20\cf0
\par \plain\f4\fs28\cf0\ul Asynchronous Synchronous Serial Interface 0 (ASC0)
\par
\par \plain\f4\fs24\cf0 Macros:\f4\fs20\cf0
\par \plain\f4\fs24\cf0 Functions:\f4\fs20\cf0
\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ASC0_vInit(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the initialization function of the ASC0 function

\par \tab \tab library. It is assumed that the SFRs used by this library

\par \tab \tab are in their reset state.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ASC0_vSendData(ushort usData)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function writes a send data initialization word into

\par \tab \tab the transmit buffer register.

\par \tab \tab Note:

\par \tab \tab In a multiprocessor system the master with this function

\par \tab \tab has the possibility to send data to the selected slave. To

\par \tab \tab achieve this, the 9th bit must set on zero.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab usData:

\par \tab \tab Data to be send

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab ushort ASC0_usGetData(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This function reads out the content of the receive buffer

\par \tab \tab register which contains the received data.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b data that has been received\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs20\cf0 \tab Function:
\par \plain\f4\fs20\cf0\b \tab \tab void ASC0_viRx(void)\plain\f4\fs20\cf0
\par \tab Description:
\par \plain\f4\fs20\cf0\i
\tab \tab This is the receive interrupt service routine for the ASC0.

\par \tab \tab It is called if the data has been received.

\par \tab \tab Please note that you have to add application specific code

\par \tab \tab to this function.

\par \plain\f4\fs20\cf0 \tab Returnvalue:
\par \tab \tab \plain\f4\fs20\cf0\b None\plain\f4\fs20\cf0
\par \plain\f4\fs20\cf0 \tab Parameters:
\par \plain\f4\fs20\cf0\b 
\tab \tab None

\par
\par \plain\f4\fs24\cf0 Initialization:
\par \plain\f4\fs20\cf0\b
\par
\tab Configuration of the Module Clock:\par 
\tab - enable the ASC0 module\par 
\tab - clock divider for normal operation mode: System clock / 2 (= 20.00\par 
\tab MHz; 50.00 ns )\par 
\tab - the ASC0 module is stopped during sleep mode\par 
\par 
\tab Configuration of the ASC0 Baudrate Generator:\par 
\tab - fractional divider as prescaler for baud rate timer is used\par 
\par 
\tab - required baud rate = 19200 baud\par 
\tab - real baud rate     = 19200 baud\par 
\tab - deviation          = 0 %\par 
\par 
\tab Configuration of the ASC0 Operation Mode:\par 
\tab - 8-bit data asychronous operation with one stop bit\par 
\tab - receiver is enabled\par 
\tab - fractional divider is enabled\par 
\par 
\tab Configuration of the used ASC0 Port Pins:\par 
\par 
\tab - P3.0 is used as   ASC0 receive input signal 1 ( ASC0_RX)\par 
\tab - the pull-up device is assigned\par 
\tab - output driver characteristic: Strong driver soft edge\par 
\par 
\tab - P3.1 is used as  ASC0 output signal 1 ( ASC0_TX)\par 
\tab - the push/pull function is activated\par 
\tab - output driver characteristic: Strong driver soft edge\par 
\tab - the emergency stop function is disabled\par 
\par 
\tab Configuration of the used ASC0 Interrupts:\par 
\tab - Rx service request node configuration:\par 
\tab - Rx interrupt priority level (SRPN) = 1\par 
\tab - Rx CPU interrupt is selected\par 
\par 

}
